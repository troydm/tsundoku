#!/usr/bin/env perl

# Copyright (C) 2018-2022 Dmitry Geurkov - All Rights Reserved
# You may use, distribute and modify this code under the
# terms of the MIT license
#
# You should have received a copy of the MIT license with this file

use strict;
use warnings;
use utf8;
use Encode qw/decode_utf8/;
use feature 'say';
use Cwd qw/getcwd/;
use URI::Escape qw/uri_escape_utf8/;
use Dancer2;
use Dancer2::Plugin::Auth::Extensible;
use DBI qw/:sql_types/;
use DBD::SQLite::Constants ':dbd_sqlite_string_mode';
use File::Basename qw/dirname basename/;
use File::Slurper qw/read_dir read_binary/;
use File::Temp qw/tmpnam/;
use File::Copy qw/move/;
use Template;

binmode STDOUT, ':utf8';

my $host = '0.0.0.0';
my $port = 3000;
my $root = getcwd;
my $tsundoku_dir = dirname($0);

# process arguments
if (defined $ARGV[0]){
    if ($ARGV[0] eq '-h' || $ARGV[0] eq '--help') {
        say "tsundoku [host:][port]";
        exit 0;
    }
    if ($ARGV[0] =~ /([^:]+):(\d+)/) {
        $host = $1;
        $port = $2;
    } elsif ($ARGV[0] =~ /(\d+)/) {
        $port = $1;
    }
}

say "Starting tsundoku in $root";

# change current dir to root
unless (-d $root) {
    die 'Root directory doesn\'t exists';
}
chdir($root);

# init db
my $first_time = 0;
unless (-f '.tsundoku.db') {
    say 'First time starting up tsundoku, please wait for database to initialize...';
    $first_time = 1;
}
my $db = DBI->connect('DBI:SQLite:dbname=.tsundoku.db','','', { RaiseError => 1, sqlite_unicode => 1}) or die $DBI::errstr;
$db->{sqlite_string_mode} = DBD_SQLITE_STRING_MODE_UNICODE_FALLBACK;
$db->do("PRAGMA encoding = 'UTF-8'") or die $db->errstr;
$db->do('
CREATE TABLE IF NOT EXISTS BOOKS (
    PATH TEXT PRIMARY KEY NOT NULL,
    DIR TEXT KEY NOT NULL,
    NAME TEXT NOT NULL,
    DESC TEXT NULL,
    AUTHORS TEXT NULL,
    TAGS TEXT NULL,
    THUMBNAIL BLOB NULL
    );
') or die $db->errstr;

if ($first_time) {
    init_books_recursively(undef,$root);
} else {
    query_books('\'1\'=?','1');
}
undef $first_time;

sub escapeQuote {
    my ($value) = @_;
    $value =~ s/'/\\'/g;
    return $value;
}

sub escapeHtmlQuote {
    my ($value) = @_;
    $value =~ s/'/&#39;/g;
    $value =~ s/"/&#34;/g;
    return $value;
}

sub remember_session {
    session->expires(315569520) if session('logged_in_user_rememberMe');
}

hook before => \&remember_session;

sub create_thumbnail {
    my ($path) = @_;
    my $tempfile = tmpnam() . '.png';
    my $renamed = $path;
    if ($path =~ m/[%\[\]?:]/) {
        $renamed =~ s/[%\[\]?:]/_/g;
        rename($path, $renamed);
    }
    system("convert -thumbnail '200x250>' -gravity center -background white -alpha remove :\"$renamed\"[0] \"$tempfile\"");
    if ($renamed ne $path) {
        rename($renamed, $path);
    }
    if (-f $tempfile) {
        my $blob = read_binary($tempfile);
        unlink $tempfile;
        return $blob;
    }
    return undef;
}

sub init_book {
    my ($path) = @_;
    say "Initializing book $path";
    my $name = basename($path);
    $name =~ s/\.[^.]+$//;
    $name =~ s/[_\-]/ /g;
    $name =~ s/(\D)\.(\D)/$1 $2/g;
    my $authors = undef;
    if ($name =~ /by\s+(.*)$/) {
        $authors = $1;
        $authors =~ s/^\s+|\s+$//g
    }
    my $year = undef;
    if ($name =~ /([1-2][0-9]{3})/) {
        $year = $1;
        $year =~ s/^\s+|\s+$//g
    }
    my $tags = '';
    unless (dirname($path) eq $root) {
        $tags = basename(dirname($path));
    }
    if (defined $year) {
        if ($tags) {
            $tags .= "|$year";
        } else {
            $tags = "$year";
        }
    }
    my $blob = create_thumbnail($path);
    $path = substr($path, length($root));
    my $dir = dirname($path);
    my $st = $db->prepare('INSERT OR REPLACE INTO BOOKS VALUES (?, ?, ?, NULL, ?, ?, ?)');
    $st->bind_param(1, $path, SQL_VARCHAR);
    $st->bind_param(2, $dir, SQL_VARCHAR);
    $st->bind_param(3, $name, SQL_VARCHAR);
    $st->bind_param(4, $authors, SQL_VARCHAR);
    $st->bind_param(5, $tags, SQL_VARCHAR);
    $st->bind_param(6, $blob, SQL_BLOB);
    $st->execute;
    $st->finish;
    return (
        path => $path, dir => $dir, name => $name, desc => undef,
        authors => $authors, tags => [split(/\|/,$tags)],
        tags_value => $tags, thumbnail => defined($blob)
    );
}

sub update_book {
    my ($path,$newpath,$name,$authors,$desc,$tags) = @_;
    my $moved = 0;
    if ($newpath ne $path) {
        if (!$newpath || !($newpath =~ /^\//) || $newpath =~ /\/$/) {
            return 'invalid path specified';
        }
        my $books = query_books('PATH=?',$newpath);
        if (%$books != 0) {
            return 'book with this path already exists';
        }
        if (dirname($newpath) eq dirname($path)) {
            unless (rename($root.$path, $root.$newpath)) {
                return 'renaming file failed';
            }
        } else {
            unless (-d dirname($root.$newpath)) {
                return 'invalid directory specified';
            }
            unless (move($root.$path, $root.$newpath)) {
                return 'moving file failed';
            } else {
                $moved = 1;
            }
        }
    }
    my $dir = dirname($newpath);
    my $st = $db->prepare('UPDATE BOOKS SET PATH=?, DIR=?, NAME=?, AUTHORS=?, DESC=?, TAGS=? WHERE PATH=?') or die $DBI::errstr;
    $st->bind_param(1, $newpath, SQL_VARCHAR);
    $st->bind_param(2, $dir, SQL_VARCHAR);
    $st->bind_param(3, $name, SQL_VARCHAR);
    $st->bind_param(4, $authors, SQL_VARCHAR);
    $st->bind_param(5, $desc, SQL_VARCHAR);
    $st->bind_param(6, $tags, SQL_VARCHAR);
    $st->bind_param(7, $path, SQL_VARCHAR);
    $st->execute;
    $st->finish;
    return $moved ? 'book moved' : 'book saved';
}

sub query_books {
    my ($cond,$value) = @_;
    my %books;
    my $st = $db->prepare('SELECT PATH, DIR, NAME, DESC, AUTHORS, TAGS, LENGTH(THUMBNAIL) FROM BOOKS WHERE '.$cond) or die $DBI::errstr;
    $st->bind_param(1, $value, SQL_VARCHAR);
    $st->execute;
    while (my ($path,$dir,$name,$desc,$authors,$tags, $thumbnail_len) = $st->fetchrow_array) {
        unless (defined $tags) {
            $tags = '';
        }
        if (-f "$root/$path") {
            my %book = (
                path => $path, dir => $dir, name => $name, desc => $desc,
                authors => $authors, tags => [split(/\|/,$tags)],
                tags_value => $tags, thumbnail => defined($thumbnail_len)
            );
            $books{$book{path}} = \%book;
        } else {
            say "Cleaning up $path from database";
            my $delst = $db->prepare('DELETE FROM BOOKS WHERE PATH=?') or die $DBI::errstr;
            $delst->bind_param(1, $path, SQL_VARCHAR);
            $delst->execute;
            $delst->finish;
        }
    }
    $st->finish;
    return \%books;
}

sub init_books {
    my ($dir) = @_;
    my $dirpath = substr($dir, length($root));
    unless ($dirpath) {
        $dirpath = '/';
    }
    my $books = query_books('DIR=?', $dirpath);
    unless ($dirpath eq '/') {
        $dirpath .= '/';
    }
    my %books = %$books;
    for my $file (read_dir($dir)) {
        $file = decode_utf8($file);
        unless ($file =~ /^\./) {
            if (-d "$dir/$file") {
                my $path = $dirpath.$file;
                my $name = basename($path);
                $name =~ s/[_\-.]/ /g;
                $books{$path} = [$path, $name];
            }
            elsif (!(exists $books{$dirpath.$file})) {
                if ($file =~ m/\.pdf$/i || $file =~ m/\.epub$/i || $file =~ m/\.djvu$/i) {
                    my %book = init_book "$dir/$file";
                    $books{$book{path}} = \%book;
                }
            }
        }
    }
    return \%books;
}

sub init_books_recursively {
    my ($books,$path) = @_;
    if (-d $path) {
        my $more_books = init_books $path;
        if (defined $more_books) {
            if (defined $books) {
                $books = { %$books, %$more_books };
            }
            foreach (keys %$more_books) {
                if (ref($more_books->{$_}) eq 'ARRAY') {
                    $books = init_books_recursively($books, $root . $more_books->{$_}->[0]);
                }
            }
        }
    }
    return $books;
}

get '/thumbnail**' => require_login sub {
    my ($path) = splat;
    $path = join '/', @$path;
    my $st = $db->prepare('SELECT THUMBNAIL FROM BOOKS WHERE PATH=?') or die $DBI::errstr;
    $st->bind_param(1, $path, SQL_VARCHAR);
    $st->execute or die $DBI::errstr;
    my @row = $st->fetchrow_array;
    if (@row == 1) {
        send_file(\$row[0], content_type => 'image/png');
    } else {
        status 'not_found';
        return 'Thumbnail does not exists';
    }
};

get '/download**' => require_login sub {
    my ($path) = splat;
    $path = join '/', @$path;
    $path = $root . $path;
    if (-f $path) {
        send_file($path, system_path => 1, filename => basename($path));
    } else {
        status 'not_found';
        return 'File does not exists';
    }
};

get '/public/**' => sub {
    my ($path) = splat;
    $path = join '/', @$path;
    send_file $path;
};

get '/favicon.ico' => sub {
    send_file 'favicon.ico';
};

get '/list**' => require_login sub {
    my ($path) = splat;
    $path = join '/', @$path;
    $path =~ s/\/$//;
    $path = $root . $path;
    if (-d $path) {
        my @dirs;
        my @books;
        my $books = init_books $path;
        foreach (keys %$books) {
            if (ref($books->{$_}) eq 'ARRAY') {
                push @dirs, $books->{$_};
            } else {
                push @books, $books->{$_};
            }
        }
        @dirs = sort { lc($a->[1]) cmp lc($b->[1]) } @dirs;
        @books = sort { lc($a->{name}) cmp lc($b->{name}) } @books;
        template 'list.tt', {
            dirs => \@dirs,
            books => \@books,
            quote => \&escapeQuote,
            htmlQuote => \&escapeHtmlQuote,
            uriEscape => \&uri_escape_utf8,
            admin => user_has_role('admin'),
        };
    } else {
        status 'not_found';
        return 'Directory does not exists';
    }
};

get '/dir**' => require_login sub {
    my ($path) = splat;
    $path = join '/', @$path;
    my @dirs = ([$path, basename($path)]);
    my @books;
    template 'list.tt', {
        dirs => \@dirs,
        books => \@books,
        quote => \&escapeQuote,
        htmlQuote => \&escapeHtmlQuote,
        uriEscape => \&uri_escape_utf8,
    };
};

sub move_books {
    my ($path,$newpath) = @_;
    my @books;
    my $st = $db->prepare('SELECT PATH FROM BOOKS WHERE DIR=?');
    $st->bind_param(1, $path, SQL_VARCHAR);
    $st->execute;
    while (my ($bookpath) = $st->fetchrow_array) {
        push @books, $bookpath;
    }
    $st->finish;
    foreach (@books) {
        $st = $db->prepare('UPDATE BOOKS SET PATH=?, DIR=? WHERE PATH=?');
        my $newbookpath = $_;
        $newbookpath =~ s/^\Q$path\E/$newpath/;
        $st->bind_param(1, $newbookpath, SQL_VARCHAR);
        $st->bind_param(2, $newpath, SQL_VARCHAR);
        $st->bind_param(3, $_, SQL_VARCHAR);
        $st->execute;
        $st->finish;
    }
    for my $file (read_dir($root.$newpath)) {
        $file = decode_utf8($file);
        unless ($file =~ /^\./) {
            if (-d "$root$newpath/$file") {
                move_books("$path/$file","$newpath/$file");
            }
        }
    }
}

post '/save-dir**' => require_role admin => sub {
    my ($path) = splat;
    $path = join '/', @$path;
    if (-d $root.$path) {
        my $newpath = body_parameters->get('path');
        if ($newpath ne $path) {
            if (!$newpath || !($newpath =~ /^\//) || $newpath =~ /\/$/) {
                return 'invalid path specified';
            }
            if (dirname($newpath) eq dirname($path)) {
                unless (rename($root.$path, $root.$newpath)) {
                    return 'renaming directory failed';
                }
                move_books($path, $newpath);
            } else {
                unless (-d dirname($root.$newpath)) {
                    return 'invalid parent directory specified';
                }
                unless (move($root.$path, $root.$newpath)) {
                    return 'moving directory failed';
                }
                move_books($path, $newpath);
                return 'dir moved';
            }
        }
        return 'dir saved';
    } else {
        status 'not_found';
        return 'Dir does not exists';
    }
};

get '/book**' => require_login sub {
    my ($path) = splat;
    $path = join '/', @$path;
    my $books = query_books('PATH=?', $path);
    if (%$books == 1) {
        my @dirs;
        my @books = ((values %$books)[0]);
        template 'list.tt', {
            dirs => \@dirs,
            books => \@books,
            quote => \&escapeQuote,
            htmlQuote => \&escapeHtmlQuote,
            uriEscape => \&uri_escape_utf8,
        };
    } else {
        status 'not_found';
        return 'Book does not exists';
    }
};

post '/save-book**' => require_role admin => sub {
    my ($path) = splat;
    $path = join '/', @$path;
    my $books = query_books('PATH=?', $path);
    if (%$books == 1) {
        my $newpath = body_parameters->get('path');
        my $name = body_parameters->get('name');
        my $authors = body_parameters->get('authors');
        my $desc = body_parameters->get('desc');
        my $tags = body_parameters->get('tags');
        return update_book($path,$newpath,$name,$authors,$desc,$tags);
    } else {
        status 'not_found';
        return 'Book does not exists';
    }
};

post '/delete-book**' => require_role admin => sub {
    my ($path) = splat;
    $path = join '/', @$path;
    my $books = query_books('PATH=?', $path);
    if (%$books == 1) {
        my $st = $db->prepare('DELETE FROM BOOKS WHERE PATH=?');
        $st->bind_param(1, $path, SQL_VARCHAR);
        $st->execute;
        $st->finish;
        unlink($root.$path);
        say "Book $root$path deleted";
        return 'Book deleted';
    } else {
        status 'not_found';
        return 'Book does not exists';
    }
};

sub delete_directory {
    my ($path) = @_;
    if (-d $root.$path) {
        my $books = init_books($root.$path);
        foreach (keys %$books) {
            if (ref($books->{$_}) eq 'ARRAY') {
                my $ret = delete_directory($_);
                if ($ret ne 'dir deleted') {
                    return $ret;
                }
            } else {
                my $st = $db->prepare('DELETE FROM BOOKS WHERE PATH=?');
                $st->bind_param(1, $_, SQL_VARCHAR);
                $st->execute;
                $st->finish;
                unlink($root.$_);
                say "Book $root$_ deleted";
            }
        }
        unless(rmdir($root.$path)) {
            return 'Couldn\'t removed directory';
        }
        return 'dir deleted';
    } else {
        return 'Directory does not exists';
    }
}

post '/delete-dir**' => require_role admin => sub {
    my ($path) = splat;
    $path = join '/', @$path;
    $path =~ s/\/$//;
    return delete_directory($path);
};

get '/search**' => require_login sub {
    my ($path) = splat;
    my $text = query_parameters->get('text');
    $path = join '/', @$path;
    $path = $root . $path;
    $path =~ s/\/$//;
    if (-d $path) {
        my @dirs;
        my @books;
        my $books = init_books_recursively({},$path);
        foreach (keys %$books) {
            if (ref($books->{$_}) eq 'ARRAY') {
                my $dir = $books->{$_};
                if ($dir->[1] =~ m/\Q$text\E/i) {
                    push @dirs, $books->{$_};
                }
            } else {
                my $book = $books->{$_};
                if ($book->{name} =~ m/\Q$text\E/i || (defined $book->{authors} && $book->{authors} =~ m/\Q$text\E/i) ||
                    (defined $book->{desc} && $book->{desc} =~ m/\Q$text\E/i) ||
                    (defined $book->{tags} && (grep {m/\Q$text\E/i} @{$book->{tags}}) > 0)) {
                    push @books, $books->{$_};
                }
            }
        }
        @dirs = sort { lc($a->[1]) cmp lc($b->[1]) } @dirs;
        @books = sort { lc($a->{name}) cmp lc($b->{name}) } @books;
        template 'list.tt', {
            dirs => \@dirs,
            books => \@books,
            quote => \&escapeQuote,
            htmlQuote => \&escapeHtmlQuote,
            uriEscape => \&uri_escape_utf8,
        };
    } else {
        status 'not_found';
        return 'Directory does not exists';
    }
};

get '/' => require_login sub {
    template 'index.tt', {
        root => $root,
        user => logged_in_user->{name},
        admin => user_has_role('admin'),
    };
};

get '/login' => sub {
    template 'login.tt';
};

post '/login' => sub {
    my $login = body_parameters->get('login');
    my $password = body_parameters->get('password');
    my $rememberMe = body_parameters->get('rememberMe');
    my ($success, $realm) = authenticate_user($login, $password);
    if ($success) {
        app->change_session_id if app->can('change_session_id');
        session logged_in_user => $login;
        session logged_in_user_realm => $realm;
        session logged_in_user_rememberMe => $rememberMe;
        redirect '/';
    } else {
        sleep 3;
        template 'login.tt', { login => $login, password => $password, rememberMe => $rememberMe, error => 'Invalid Login or Password' };
    }
};

any '/logout' => sub {
    app->destroy_session;
    redirect '/login';
};

# start web server
set host => $host;
set port => $port;
set confdir => $tsundoku_dir;
dance;
