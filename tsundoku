#!/usr/bin/env perl

# Copyright (C) 2018-2021 Dmitry Geurkov - All Rights Reserved
# You may use, distribute and modify this code under the
# terms of the MIT license
#
# You should have received a copy of the MIT license with this file

use strict;
use warnings;
use 5.010;

use utf8;
use Cwd;

if (defined $ARGV[0]){
    if ($ARGV[0] eq '-h' || $ARGV[0] eq '--help') {
        say "tsundoku [host:][port]";
        exit 0;
    }
}

my $root = getcwd;

{
package Tsundoku;
use DBI qw(:sql_types);
use HTTP::Server::Simple;
use base qw(HTTP::Server::Simple::CGI);

use Encode;
use File::Basename;

undef $/;
my $template = <::DATA>;
close ::DATA;
local $/ = "\n";

my $db = DBI->connect('DBI:SQLite:dbname=.tsundoku.db','','', { RaiseError => 1 }) or die $DBI::errstr;
my $stmt = qq(CREATE TABLE IF NOT EXISTS BOOKS (
                     NAME TEXT PRIMARY KEY NOT NULL,
                     THUMBNAIL BLOB NULL
                ););
my $rv = $db->do($stmt);
if($rv < 0) {
    die $DBI::errstr;
}

sub not_found {
    my $self = shift;
    my $cgi  = shift;

    print "HTTP/1.0 404 Not found\r\n";
    print $cgi->header,
    $cgi->start_html('Not found'),
    $cgi->h1('404'),
    $cgi->h2('Not found'),
    $cgi->end_html;
    return;
}

sub output_file {
    my $self = shift;
    my $cgi  = shift;
    my $path = shift;
    my $content_type = shift;
    my @stat = stat $path;
    my $size = $stat[7];
    print "HTTP/1.0 200 OK\r\n",
          $cgi->header(
              -type => $content_type,
              -Content_length => $size
              );
    my $bytes;
    binmode(STDOUT, ":raw");
    open my $fh, '<:raw', $path;
    while (read($fh, $bytes, 125000)) {
        print $bytes;
    }
    close $fh;
    return;
}

sub output_binary {
    my $self = shift;
    my $cgi  = shift;
    my $blob = shift;
    my $content_type = shift;
    my $size = length($$blob);
    print "HTTP/1.0 200 OK\r\n",
          $cgi->header(
              -type => $content_type,
              -Content_length => $size
              );
    binmode(STDOUT, ":raw");
    print $$blob;
    return;
}

sub handle_request {
    my $self = shift;
    my $cgi  = shift;

    binmode(STDOUT, ":encoding(UTF-8)");
    my $path = $cgi->path_info();
    my $fullpath = $root.$path;

    if (-e $fullpath && !($path =~ m/\.\.\//)) {
        if (-d $fullpath) {
            opendir (my $dir, $fullpath);
            my @paths = readdir $dir;
            closedir $dir;
            my $body = '';
            my @files = ();
            foreach my $file (@paths) {
                if ($file =~ m/^\./) {
                    next;
                }
                $file = Encode::decode_utf8( $file );
                push(@files, $file);
            }
            $body .= "<div class=\"row\">\n";
            my $i = 0;
            my $addpath = $path."/";
            if ($addpath eq '//') {
                $addpath = '/';
            }
            foreach my $file (sort @files) {
                my $img = 'https://upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Icons8_flat_document.svg/240px-Icons8_flat_document.svg.png';
                if (-d ($fullpath."/".$file)) {
                    $img = 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/a1/Icons8_flat_folder.svg/240px-Icons8_flat_folder.svg.png';
                }
                if ($file =~ m/\.(pdf|djvu)$/) {
                    $img = $file;
                    $img =~ s/(\.[^.]+)$/\.png/;
                    $img = $addpath.$img;
                }
                $body .= "<div class=\"col border\"><a href=\"$addpath$file\">";
                $body .= "<div class=\"row\"><div class=\"col\"><img src=\"$img\"/></div></div>\n";
                $body .= "<div class=\"row\"><div class=\"col\">$file</div></div>\n";
                $body .= "</a></div>\n";
                $i++;
                if ($i % 3 == 0) {
                    $body .= "</div>\n<div class=\"row\">\n";
                }
            }
            $body .= "</div>\n";

            my $page = $template;
            $page =~ s/\$path/$path/;
            $page =~ s/\$body/$body/;
            print "HTTP/1.0 200 OK\r\n",
                  "Content-Type: text/html; charset=utf-8\r\n\r\n",
                  $page;
        } else {
            if ($path =~ m/\.?([^.]*)$/) {
                if ($1 eq 'pdf') {
                    $self->output_file($cgi, $fullpath, "application/pdf");
                } else {
                    $self->output_file($cgi, $fullpath, "application/octet-stream");
                }
            } else {
                $self->not_found($cgi);
            }
        }
    } else {
        my ($filename, $dir) = fileparse($fullpath);
        my $name = $filename;
        $name =~ s/\.[^.]+$//;
        my $input_file = "$dir$name.pdf";
        unless (-e $input_file) {
            $input_file = "$dir$name.djvu";
        }
        if (-e $input_file) {
            my $sth = $db->prepare(qq(SELECT * FROM BOOKS WHERE NAME='$input_file';)) or die $DBI::errstr;
            my $rv = $sth->execute() or die $DBI::errstr;
            my @row = $sth->fetchrow_array();
            if (@row) {
                $self->output_binary($cgi, \$row[1], 'image/png');
            } else {
                my $out_image = "/tmp/$name.png";
                system("convert -thumbnail x250 -background white -alpha remove :\"$input_file\"[0] \"$out_image\"");
                my $blob = `cat "$out_image"`;
                my $sth = $db->prepare("INSERT OR REPLACE INTO BOOKS VALUES ('$input_file', ?)");
                $sth->bind_param(1, $blob, SQL_BLOB);
                $sth->execute();
                unlink($out_image);
                $self->output_binary($cgi, \$blob, 'image/png');
            }
        } else {
            $self->not_found($cgi);
        }
    }
    return;
}


}

my $host = "localhost";
my $port = 8080;
if (defined $ARGV[0]) {
    if ($ARGV[0] =~ /([^:]+):(\d+)/) {
        $host = $1;
        $port = $2;
    } elsif ($ARGV[0] =~ /(\d+)/) {
        $port = $1;
    }
}

my $server = Tsundoku->new($port);
$server->host($host);
$server->run();

__DATA__
<!doctype html>
<html lang="en">
<head>
<!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

<!-- Bootstrap CSS -->
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">

<title>Tsundoku $path</title>

</head>
<body>

<div class="container-fluid">
$body
</div>

<!-- Optional JavaScript -->
<!-- jQuery first, then Popper.js, then Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
</body>
</html>
